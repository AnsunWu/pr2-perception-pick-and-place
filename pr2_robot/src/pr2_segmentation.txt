/*

ROS node for point cloud cluster based segmentaion of cluttered objects on table

Author: Sean Cassero
7/15/15

*/


#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/passthrough.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/kdtree/kdtree.h>
#include <pcl/segmentation/extract_clusters.h>
#include <pr2_robot/SegmentedClustersArray.h>
#include <pcl/filters/statistical_outlier_removal.h>

#define DEBUG

class segmentation {

public:

  explicit segmentation(ros::NodeHandle nh) : m_nh(nh);

  void voxel_filter(); // voxel filter declaration
  void passthrough_filter();

private:
  // declare the nodehandle and pubs/subs
  ros::NodeHandle m_nh;
  ros::Publisher m_pub;
  ros::Subscriber m_sub;
  ros::Publisher m_clusterPub;

  // define filter function parameters
  float m_y_passthrough_min;
  float m_y_passthrough_max;
  float m_z_passthrough_min;
  float m_z_passthrough_max;
  float m_voxel_leaf;
  float m_outlier_stdev;
  float m_outlier_meanK;
  float m_ransac_dist_thresh;
  float m_euclidean_cluster_tolerance;
  float m_euclidean_min_cluster_size;
  float m_euclidean_max_cluster_size;

  // declare the filter instances, these are initialized with the contructor
  pcl::VoxelGrid<pcl::PCLPointCloud2> m_voxelFilter;
  pcl::PassThrough<pcl::PointXYZRGB> m_passY;
  pcl::PassThrough<pcl::PointXYZRGB> m_passZ;
  pcl::StatisticalOutlierRemoval<pcl::PointXYZRGB> m_outlierFilter;
  pcl::SACSegmentation<pcl::PointXYZRGB> m_ransac_segmentation; // segmentation class for RANSAC
  pcl::search::KdTree<pcl::PointXYZRGB>::Ptr m_tree; //Ptr to kd tree for Euclidean segmentaiton


  // declare the pcl and ROS point clouds used in filtering functions
  pcl::PCLPointCloud2* m_incoming_cloud; // holds the incoming cloud in pcl::PointCloud2 format
  pcl::PCLPointCloud2ConstPtr m_incomingCloudPtr; // shared ptr to the incoming cloud in pcl::PointCloud2 format
  pcl::PCLPointCloud2* m_cloud_filtered; // point cloud to hold filtered cloud in pcl::PointCloud2 format
  pcl::PCLPointCloud2Ptr m_cloudFilteredPtr;
  pcl::PointCloud<pcl::PointXYZRGB> *m_xyz_cloud; // cloud to hold point cloud in pcl::PointCloud<Pcl::PointXYZRGB> format
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr m_xyzCloudPtr;
  pcl::ModelCoefficients::Ptr m_coefficients; // Ptr to the coefficients for the ransac filtering
  pcl::PointIndices::Ptr m_inliers; // Ptr to PointIndices object to hold results from RANSAC filtering
  std::vector<pcl::PointIndices> m_cluster_indices; // indices for the
  pcl::ExtractIndices<pcl::PointXYZRGB> m_extract; // extraction object for RANSAC
  pcl::EuclideanClusterExtraction<pcl::PointXYZRGB> m_ec; // object to extract indices from point cloud
  sensor_msgs::PointCloud2 m_output; // holds the ouput cloud in sensor_msgs::PointCloud2 format
  pcl::PCLPointCloud2 m_outputPCL; // holds the output cloud in pcl::PointCloud2 format

  pr2_robot::SegmentedClustersArray m_CloudClusters; // the output message

  #ifdef DEBUG // add the extra publishers if in debug mode

  ros::Publisher m_voxelPub;
  ros::Publisher m_outliersPub;
  ros::Publisher m_passthroughZPub;
  ros::Publisher m_ransacPub;
  ros::Publisher m_passthroughYPub;

  #endif

  void cloud_cb(const sensor_msgs::PointCloud2ConstPtr& cloud_msg);

}; // end segmentation class declaration


explicit segmentation::segmentation(ros::NodeHandle nh) : m_nh(nh){ // constructor for the segmentation class

  // define the subscriber and publisher
  m_sub = m_nh.subscribe ("/pr2/world/points", 1, &segmentation::cloud_cb, this);
  m_clusterPub = m_nh.advertise<pr2_robot::SegmentedClustersArray> ("pr2_robot/pcl_clusters",1);

  #ifdef DEBUG // add in the publishers to look at the output through Rviz if debugging
  m_voxelPub = m_nh.advertise<sensor_msgs::PointCloud2> ("pr2_robot/pcl_voxel",1);
  m_outliersPub = m_nh.advertise<sensor_msgs::PointCloud2> ("pr2_robot/pcl_ouliers",1);
  m_passthroughPub = m_nh.advertise<sensor_msgs::PointCloud2> ("pr2_robot/pcl_passthrough",1);
  m_ransacPub = m_nh.advertise<sensor_msgs::PointCloud2> ("pr2_robot/pcl_ransac",1);
  m_passthrough2Pub = m_nh.advertise<sensor_msgs::PointCloud2> ("pr2_robot/pcl_passthrough2",1);
  #endif

  // initialize the point cloud ptrs 
  pcl::PCLPointCloud2* m_incoming_cloud = new pcl::PCLPointCloud2;
  pcl::PCLPointCloud2ConstPtr m_incomingCloudPtr(m_incoming_cloud);
  //pcl::PCLPointCloud2* m_cloud_filtered = new pcl::PCLPointCloud2;
  //pcl::PCLPointCloud2Ptr m_cloudFilteredPtr (m_cloud_filtered)
  pcl::PointCloud<pcl::PointXYZRGB> *m_xyz_cloud = new pcl::PointCloud<pcl::PointXYZRGB>;
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr m_xyzCloudPtr(m_xyz_cloud);
  pcl::ModelCoefficients::Ptr m_coefficients(new pcl::ModelCoefficients);
  pcl::PointIndices::Ptr m_inliers (new pcl::PointIndices);

  //



} // end constructor declaration

// define callback function
void segmentation::cloud_cb (const sensor_msgs::PointCloud2ConstPtr& cloud_msg)
{}




int main (int argc, char** argv)
{
  // Initialize ROS
  ros::init (argc, argv, "segmentation");
  ros::NodeHandle nh;

  segmentation segs(nh);

  while(ros::ok())
  ros::spin ();

}
